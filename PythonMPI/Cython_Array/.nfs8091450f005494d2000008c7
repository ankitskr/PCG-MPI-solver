# -*- coding: utf-8 -*-
"""
Created on Thu Nov 16 14:20:37 2017

@author: Ankit
"""


#import numpy as np 
cimport numpy as np
cimport cython

"""
cdef extern from "math.h":
    double sin(double arg)


@cython.boundscheck(False) # turn off bounds-checking
@cython.wraparound(False)  # turn off negative index wrapping
cpdef np.ndarray[np.double_t,ndim=1] apply_sin(np.ndarray[np.double_t, ndim=1] a):
    
    cdef int i
    
    cdef np.ndarray[np.double_t, ndim=1] out
    out = np.ndarray(len(a), dtype=float)
    
    for i in range(len(a)):
        
        out[i] = sin(a[i])
        
    return out
"""  


@cython.boundscheck(False) # turn off bounds-checking
@cython.wraparound(False)  # turn off negative index wrapping
cpdef np.ndarray[np.double_t,ndim=1] apply_sum(int N_Elem, np.ndarray[float, ndim=1] MP_LocFintVector, np.ndarray[int, ndim=2] ElemList_LocDOFIdVector, np.ndarray[float, ndim=2] ElemList_Fint):

    cdef int q = 0
    
    for q in range(N_Elem):
            
        MP_LocFintVector[ElemList_LocDOFIdVector[:, q]] += ElemList_Fint[:, q]

